openapi: 3.0.0
info:
  title: Gateway API
  description: Master cloud apps TFM gateway API.
  version: 1.0.0
servers:
  - url: https://localhost:8444
  - url: https://apigw-tfm-dev-amartinm82.cloud.okteto.net
  - url: https://apigw-tfm-amartinm82.cloud.okteto.net
paths:
  /admins/auth:
    post:
      description: Authenticate an admin using passed credentials and return a JWT token.
      tags:
        - admins
      operationId: adminAuthentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: a JSON web token (JWT).
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                required:
                  - token
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsError'
        '500':
          $ref: '#/components/responses/InternalError'
  /admins:
    post:
      description: Creates an admin and returns the admin ID.
      tags:
        - admins
      operationId: createAdmin
      requestBody:
        required: true
        description: A JSON object that contains the username (email) and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created admin
          headers:
            Location:
              required: true
              description: URL to get the newly-created admin.
              schema:
                type: string
                example: https://localhost:8444/admins/1
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the created admin.
                    example: 1
                required:
                  - id
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          description: Username already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Username already exists.
        '500':
          $ref: '#/components/responses/InternalError'

  /users/auth:
    post:
      description: Authenticate an user using passed credentials and return a JWT token.
      tags:
        - users
      operationId: authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: a JSON web token (JWT).
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IlVTRVJfUk9MRSIsImlhdCI6MTYzNzM0NTg5OSwiZXhwIjoxNjM3MzQ2MTk5fQ.qnkOMsfHA2YDni_WlgV7yPbEySomqKCkLK8G4t4IeUI
                required:
                  - token
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsError'
        '500':
          $ref: '#/components/responses/InternalError'
  /users:
    post:
      description: Creates an user and returns the user ID.
      tags:
        - users
      operationId: createUser
      requestBody:
        required: true
        description: A JSON object that contains the username (email) and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created user
          headers:
            Location:
              required: true
              description: URL to get the newly-created user.
              schema:
                type: string
                example: https://localhost:8444/users/1
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the created user.
                    example: 1
                required:
                  - id
          links:
            GetUserByUserId:
              operationId: getUserById
              parameters:
                userId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `GET /users/{userId}`.
            AddBalanceToUser:
              operationId: addBalance
              parameters:
                userId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `POST /users/{userId}/balance`.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          description: Username already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Username already exists.
        '500':
          $ref: '#/components/responses/InternalError'

  /users/{userId}:
    get:
      description: Get user info by ID.
      tags:
        - users
      operationId: getUserById
      parameters:
        - in: path
          description: Numeric identifier of the user to get.
          name: userId
          required: true
          schema:
            type: integer
          example: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: User not found.
        '500':
          $ref: '#/components/responses/InternalError'

  /users/{userId}/balance:
    post:
      description: Add balance to user.
      tags:
        - users
      operationId: addBalance
      parameters:
        - in: path
          description: Numeric identifier of the user to get.
          name: userId
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        description: A JSON object that contains the amount to add to user balance.
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  description: amount to add to user balance.
                  type: number
                  minimum: 0
                  exclusiveMinimum: true
                  example: 35.80
              required:
                - amount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: User not found.
        '500':
          $ref: '#/components/responses/InternalError'
  /products:
    post:
      description: Allows to admin add a product and returns the product ID.
      tags:
        - products
      operationId: createProduct
      requestBody:
        required: true
        description: A JSON object that contains product name, description, price and quantity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      security:
        - bearerAuth: [ ]
      responses:
        '201':
          description: Created product
          headers:
            Location:
              required: true
              description: URL to get the newly-created product.
              schema:
                type: string
                example: https://localhost:8444/products/1
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID of the created product.
                    example: 1
                required:
                  - id
          links:
            GetProductById:
              operationId: getProductById
              parameters:
                productId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `productId` parameter in `GET /products/{productId}`.
            UpdateProduct:
              operationId: updateProduct
              parameters:
                productId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `productId` parameter in `PUT /products/{productId}`.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '409':
          description: Product already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: A product with that name already exists.
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      description: Get all products for admin and user role.
      tags:
        - products
      operationId: getAllProducts
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: products list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '500':
          $ref: '#/components/responses/InternalError'

  /products/{productId}:
    get:
      description: Get product info by ID for admin and user role.
      tags:
        - products
      operationId: getProductById
      parameters:
        - in: path
          description: Numeric identifier of the product to get.
          name: productId
          required: true
          schema:
            type: integer
          example: 1
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: product info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '404':
          description: product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: product not found.
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      description: Alows admin to update product.
      tags:
        - products
      operationId: updateProduct
      parameters:
        - in: path
          description: Numeric identifier of the product to update.
          name: productId
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        description: A JSON object that contains product name, description, price and quantity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: updated product info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/NotAllowedError'
        '404':
          description: product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: product not found.
        '409':
          description: Product already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: A product with that name already exists.
        '500':
          $ref: '#/components/responses/InternalError'

components:
  responses:
    InvalidCredentialsError:
      description: Invalid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Invalid credentials.
    UnauthorizedError:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Access token is missing or invalid.
    NotAllowedError:
      description: Logged user doesn't have permission to access the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: You don't have permissions to access this resource.
    BadRequestError:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Bad request.
    InternalError:
      description: Internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal error.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: user email
          type: string
          format: email
          example: a.martinmar.2020@alumnos.urjc.es
        password:
          description: User passwod (UpperCase, LowerCase and Number) with at least 8 characters.
          type: string
          format: password
          minLength: 8
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).*$
          example: P4ssword
    UserResponse:
      type: object
      properties:
        id:
          description: user ID.
          type: integer
          example: 1
        username:
          description: user email.
          type: string
          format: email
          example: a.martinmar.2020@alumnos.urjc.es
        balance:
          description: user available balance.
          type: number
          example: 35.80
      required:
        - id
        - username
        - balance
    ProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - quantity
      properties:
        name:
          description: Product name
          type: string
          minLength: 3
          example: shoes
        description:
          description: Product description.
          type: string
          minLength: 3
          example: comfortable shoes
        price:
          description: Product price.
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 29.99
        quantity:
          description: Product quantity to add.
          type: integer
          minimum: 1
          example: 10
    ProductResponse:
      type: object
      properties:
        id:
          description: product ID.
          type: integer
          example: 1
        name:
          description: Product name
          type: string
          minLength: 3
          example: shoes
        description:
          description: Product description.
          type: string
          minLength: 3
          example: comfortable shoes
        price:
          description: Product price.
          type: number
          example: 29.99
        quantity:
          description: Product quantity to add.
          type: integer
          example: 10
      required:
        - id
        - name
        - description
        - price
        - quantity
    Error:
        type: object
        description: error message.
        properties:
          error:
            type: string
        required:
          - error
